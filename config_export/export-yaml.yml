---
- name: Set timestamp for output file
  hosts: localhost
  any_errors_fatal: true
  tasks:
    - name: Set timestamp fact for the output file
      ansible.builtin.set_fact:
        timestamp: '{{ lookup("pipe", "date +%Y%m%d-%H%M%S") }}'

- name: Dump configuration from automationcontroller
  hosts: automationcontroller
  connection: local
  gather_facts: false
  become: false
  vars:
    ansible_python_interpreter: "/usr/bin/python3.9"
    timestamp: "{{ hostvars['localhost']['timestamp'] }}"
    controller_validate_certs: "{{ validate_certs | default(true) | bool }}"
  tasks:
    - name: Export configuration from the first Automation Controller only
      when:
        - inventory_hostname == groups['automationcontroller'][0]
      vars:
        controller_api_plugin: "ansible.controller"
        controller_validate_certs: "{{ validate_certs | default(true) }}"
        controller_hostname: '{{ inventory_hostname }}{% if controller_port is defined %}:{{ controller_port }}{% endif %}'
      block:
        - name: Set up authentication
          when: controller_oauthtoken is not defined
          vars:
            controller_username: "{{ controller_admin_user }}"
            controller_password: "{{ controller_admin_password }}"
          block:
            - name: Get the controller oauth token
              ansible.builtin.uri: &uri_defaults
                user: "{{ controller_username }}"
                password: "{{ controller_password }}"
                force_basic_auth: true
                validate_certs: "{{ controller_validate_certs }}"
                url: "https://{{ controller_hostname }}/api/v2/tokens/"
                method: "POST"
                status_code: 201
              register: authtoken_res
              no_log: "{{ export_yaml_secure_logging | default(true) }}"

            - name: Set the oauth token to use from now on
              ansible.builtin.set_fact:
                controller_oauthtoken: "{{ authtoken_res.json.token }}"
                controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
              no_log: "{{ export_yaml_secure_logging | default(true) }}"

        - name: Export all assets
          ansible.controller.export:
            all: true
            controller_host: "{{ controller_hostname }}"
            controller_oauthtoken: "{{ hostvars[inventory_hostname]['controller_oauthtoken'] }}"
            validate_certs: "{{ controller_validate_certs }}"
          register: _results
          no_log: "{{ export_yaml_secure_logging | default(true) }}"

        - name: Show results
          ansible.builtin.debug:
            var: _results
          when:
            ansible_verbosity >= 2

        - name: Export assets to a file
          ansible.builtin.copy:
            content: "{{ _results | to_nice_yaml(width=80, explicit_start=true, explicit_end=true, indent=2) }}"
            dest: "{{ config_dump_path | default('.') }}/{{ timestamp }}-{{ controller_hostname }}-config.yml"
            mode: "0644"

        - name: Kind of useful output message
          ansible.builtin.debug:
            msg: "The AAP configuration has been saved to {{ config_dump_path | default('.') }}/{{ timestamp }}-{{ controller_hostname }}-config.yml"

      always:
        - name: Delete the controller oauth token
          vars:
            controller_username: "{{ controller_admin_user }}"
            controller_password: "{{ controller_admin_password }}"
          ansible.builtin.uri:
            <<: *uri_defaults
            url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
            method: "DELETE"
            status_code: 204
          when: controller_oauthtoken_url is defined
          no_log: "{{ export_yaml_secure_logging | default(true) }}"
...
